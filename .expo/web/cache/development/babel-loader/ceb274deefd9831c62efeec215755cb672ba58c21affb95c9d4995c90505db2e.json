{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScreenTemplate from \"../screenTemplate\";\nimport styles from \"./SearchStyle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar apiUrl = {\n  books: 'https://dummy-api.com/books',\n  articles: 'https://dummy-api.com/articles',\n  courseReserves: 'https://dummy-api.com/courseReserves'\n};\nvar handleSearch = function handleSearch() {\n  if (!(selectedCategory in apiUrl)) {\n    console.error('Invalid category selected');\n    return;\n  }\n  fetch(apiUrl[selectedCategory] + `?q=${query}`).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    console.log(`Search results for ${selectedCategory}:`, data);\n  }).catch(function (error) {\n    console.error(`Error searching for ${selectedCategory}:`, error);\n  });\n};\nexport default function SearchScreen() {\n  var _useState = useState('enter your search query'),\n    _useState2 = _slicedToArray(_useState, 2),\n    query = _useState2[0],\n    setQuery = _useState2[1];\n  var _useState3 = useState('books'),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedCategory = _useState4[0],\n    setSelectedCategory = _useState4[1];\n  return _jsx(ScreenTemplate, {\n    children: _jsx(View, {\n      style: styles.container,\n      children: _jsxs(View, {\n        style: styles.innerContainer,\n        children: [_jsx(View, {\n          style: styles.headingContainer,\n          children: _jsx(Text, {\n            style: styles.heading,\n            children: \"Search\"\n          })\n        }), _jsxs(View, {\n          style: styles.searchContainer,\n          children: [_jsxs(View, {\n            style: {\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'row',\n              flexWrap: 'wrap'\n            },\n            children: [_jsx(Button, {\n              title: \"Books\",\n              onPress: function onPress() {\n                return setSelectedCategory('books');\n              },\n              color: selectedCategory === 'books' ? 'rgb(92, 92, 92)' : 'rgb(190, 190, 190)'\n            }), _jsx(Button, {\n              title: \"Articles + Databases\",\n              onPress: function onPress() {\n                return setSelectedCategory('articles');\n              },\n              color: selectedCategory === 'articles' ? 'rgb(92, 92, 92)' : 'rgb(190, 190, 190)'\n            }), _jsx(Button, {\n              title: \"Course Reserves\",\n              onPress: function onPress() {\n                return setSelectedCategory('courseReserves');\n              },\n              color: selectedCategory === 'courseReserves' ? 'rgb(92, 92, 92)' : 'rgb(190, 190, 190)'\n            })]\n          }), _jsx(View, {\n            children: _jsx(TextInput, {\n              style: styles.input,\n              placeholder: \"Enter your search query\",\n              value: query,\n              onChangeText: function onChangeText(text) {\n                return setQuery(text);\n              }\n            })\n          })]\n        })]\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useState","View","ScrollView","Text","Button","TextInput","ScreenTemplate","styles","jsx","_jsx","jsxs","_jsxs","apiUrl","books","articles","courseReserves","handleSearch","selectedCategory","console","error","fetch","query","then","response","json","data","log","catch","SearchScreen","_useState","_useState2","_slicedToArray","setQuery","_useState3","_useState4","setSelectedCategory","children","style","container","innerContainer","headingContainer","heading","searchContainer","width","display","flexDirection","flexWrap","title","onPress","color","input","placeholder","value","onChangeText","text"],"sources":["/Users/apple/Desktop/NYUAugmentedLibrary/Screens/Search/SearchScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, ScrollView, Text, Button, TextInput } from 'react-native';\nimport ScreenTemplate from '../screenTemplate';\nimport styles from './SearchStyle';\n//dummy APIs\nconst apiUrl = {\n  books: 'https://dummy-api.com/books',\n  articles: 'https://dummy-api.com/articles',\n  courseReserves: 'https://dummy-api.com/courseReserves',\n};\n\n//perform the search based on the selected category and the query here\nconst handleSearch = () => {\n  if (!(selectedCategory in apiUrl)) {\n    console.error('Invalid category selected');\n    return;\n  }\n\n  fetch(apiUrl[selectedCategory] + `?q=${query}`)\n    .then((response) => response.json())\n    .then((data) => {\n      console.log(`Search results for ${selectedCategory}:`, data); //?redirect to which page?\n    })\n    .catch((error) => {\n      console.error(`Error searching for ${selectedCategory}:`, error);\n    });\n};\n\nexport default function SearchScreen() {\n  const [query, setQuery] = useState('enter your search query');\n  const [selectedCategory, setSelectedCategory] = useState('books'); // Default category is 'books'\n\n  return (\n    <ScreenTemplate>\n      <View style={styles.container}>\n        <View style={styles.innerContainer}>\n          <View style={styles.headingContainer}>\n            <Text style={styles.heading}>Search</Text>\n          </View>\n          {/* <TextInput\n          style={{\n            height: 40,\n            borderColor: 'gray',\n            borderWidth: 1,\n            margin: 10,\n            padding: 5,\n          }}\n          placeholder=\"Enter your search query\"\n          value={query}\n          onChangeText={(text) => setQuery(text)}\n        /> */}\n          <View style={styles.searchContainer}>\n            <View\n              style={{\n                width: '100%',\n                display: 'flex',\n                flexDirection: 'row',\n                flexWrap: 'wrap',\n              }}\n            >\n              <Button\n                title=\"Books\"\n                onPress={() => setSelectedCategory('books')}\n                color={\n                  selectedCategory === 'books'\n                    ? 'rgb(92, 92, 92)'\n                    : 'rgb(190, 190, 190)'\n                }\n              />\n              <Button\n                title=\"Articles + Databases\"\n                onPress={() => setSelectedCategory('articles')}\n                color={\n                  selectedCategory === 'articles'\n                    ? 'rgb(92, 92, 92)'\n                    : 'rgb(190, 190, 190)'\n                }\n              />\n              <Button\n                title=\"Course Reserves\"\n                onPress={() => setSelectedCategory('courseReserves')}\n                color={\n                  selectedCategory === 'courseReserves'\n                    ? 'rgb(92, 92, 92)'\n                    : 'rgb(190, 190, 190)'\n                }\n              />\n            </View>\n            <View>\n              <TextInput\n                style={styles.input}\n                placeholder=\"Enter your search query\"\n                value={query}\n                onChangeText={(text) => setQuery(text)}\n              />\n            </View>\n          </View>\n        </View>\n      </View>\n    </ScreenTemplate>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}