{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScreenTemplate from \"../screenTemplate\";\nvar apiUrl = {\n  books: 'https://dummy-api.com/books',\n  articles: 'https://dummy-api.com/articles',\n  courseReserves: 'https://dummy-api.com/courseReserves'\n};\nvar handleSearch = function handleSearch() {};\nexport default function SearchScreen() {\n  var _useState = useState({}),\n    _useState2 = _slicedToArray(_useState, 2),\n    query = _useState2[0],\n    setQuery = _useState2[1];\n  var _useState3 = useState('books'),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedCategory = _useState4[0],\n    setSelectedCategory = _useState4[1];\n  return React.createElement(ScreenTemplate, null, React.createElement(ScrollView, null, React.createElement(View, {\n    style: {\n      height: 50,\n      backgroundColor: 'white',\n      justifyContent: 'center',\n      borderBottomWidth: 2,\n      borderColor: 'black',\n      borderStyle: 'dashed'\n    }\n  }, React.createElement(Text, null, \"Search\")), React.createElement(TextInput, {\n    style: {\n      height: 40,\n      borderColor: 'gray',\n      borderWidth: 1,\n      margin: 10,\n      padding: 5\n    },\n    placeholder: \"Enter your search query\",\n    value: query,\n    onChangeText: function onChangeText(text) {\n      return setQuery(text);\n    }\n  }), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }\n  }, React.createElement(Button, {\n    title: \"Books\",\n    onPress: function onPress() {\n      return setSelectedCategory('books');\n    },\n    color: selectedCategory === 'books' ? 'blue' : 'gray'\n  }), React.createElement(Button, {\n    title: \"Articles + Databases\",\n    onPress: function onPress() {\n      return setSelectedCategory('articles');\n    },\n    color: selectedCategory === 'articles' ? 'blue' : 'gray'\n  }), React.createElement(Button, {\n    title: \"Course Reserves\",\n    onPress: function onPress() {\n      return setSelectedCategory('courseReserves');\n    },\n    color: selectedCategory === 'courseReserves' ? 'blue' : 'gray'\n  })), React.createElement(Button, {\n    onPress: handleSearch,\n    title: \"Search\",\n    color: \"#841584\"\n  })));\n}","map":{"version":3,"names":["React","useState","View","ScrollView","Text","Button","ScreenTemplate","apiUrl","books","articles","courseReserves","handleSearch","SearchScreen","_useState","_useState2","_slicedToArray","query","setQuery","_useState3","_useState4","selectedCategory","setSelectedCategory","createElement","style","height","backgroundColor","justifyContent","borderBottomWidth","borderColor","borderStyle","TextInput","borderWidth","margin","padding","placeholder","value","onChangeText","text","flexDirection","title","onPress","color"],"sources":["/Users/apple/Desktop/Augmented Library 2/Screens/Search/SearchScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, ScrollView, Text, Button } from 'react-native';\nimport ScreenTemplate from '../screenTemplate';\n\n//dummy APIs\nconst apiUrl = {\n  books: 'https://dummy-api.com/books',\n  articles: 'https://dummy-api.com/articles',\n  courseReserves: 'https://dummy-api.com/courseReserves',\n};\n\n//perform the search based on the selected category and the query here\nconst handleSearch = () => {\n  // if (!(selectedCategory in apiUrl)) {\n  //   console.error('Invalid category selected');\n  //   return;\n  // }\n  // fetch(apiUrl[selectedCategory] + `?q=${query}`)\n  //   .then((response) => response.json())\n  //   .then((data) => {\n  //     console.log(`Search results for ${selectedCategory}:`, data); //?redirect to which page?\n  //   })\n  //   .catch((error) => {\n  //     console.error(`Error searching for ${selectedCategory}:`, error);\n  //   });\n};\n\nexport default function SearchScreen() {\n  const [query, setQuery] = useState({});\n  const [selectedCategory, setSelectedCategory] = useState('books'); // Default category is 'books'\n\n  return (\n    <ScreenTemplate>\n      <ScrollView>\n        <View\n          style={{\n            height: 50,\n            backgroundColor: 'white',\n            justifyContent: 'center',\n            borderBottomWidth: 2,\n            borderColor: 'black',\n            borderStyle: 'dashed',\n          }}\n        >\n          <Text>Search</Text>\n        </View>\n        <TextInput\n          style={{\n            height: 40,\n            borderColor: 'gray',\n            borderWidth: 1,\n            margin: 10,\n            padding: 5,\n          }}\n          placeholder=\"Enter your search query\"\n          value={query}\n          onChangeText={(text) => setQuery(text)}\n        />\n\n        <View style={{ flexDirection: 'row', justifyContent: 'space-around' }}>\n          <Button\n            title=\"Books\"\n            onPress={() => setSelectedCategory('books')}\n            color={selectedCategory === 'books' ? 'blue' : 'gray'}\n          />\n          <Button\n            title=\"Articles + Databases\"\n            onPress={() => setSelectedCategory('articles')}\n            color={selectedCategory === 'articles' ? 'blue' : 'gray'}\n          />\n          <Button\n            title=\"Course Reserves\"\n            onPress={() => setSelectedCategory('courseReserves')}\n            color={selectedCategory === 'courseReserves' ? 'blue' : 'gray'}\n          />\n        </View>\n        <Button onPress={handleSearch} title=\"Search\" color=\"#841584\" />\n      </ScrollView>\n    </ScreenTemplate>\n  );\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAExC,OAAOC,cAAc;AAGrB,IAAMC,MAAM,GAAG;EACbC,KAAK,EAAE,6BAA6B;EACpCC,QAAQ,EAAE,gCAAgC;EAC1CC,cAAc,EAAE;AAClB,CAAC;AAGD,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS,CAa3B,CAAC;AAED,eAAe,SAASC,YAAYA,CAAA,EAAG;EACrC,IAAAC,SAAA,GAA0BZ,QAAQ,CAAC,CAAC,CAAC,CAAC;IAAAa,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EACtB,IAAAI,UAAA,GAAgDjB,QAAQ,CAAC,OAAO,CAAC;IAAAkB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAA1DE,gBAAgB,GAAAD,UAAA;IAAEE,mBAAmB,GAAAF,UAAA;EAE5C,OACEnB,KAAA,CAAAsB,aAAA,CAAChB,cAAc,QACbN,KAAA,CAAAsB,aAAA,CAACnB,UAAU,QACTH,KAAA,CAAAsB,aAAA,CAACpB,IAAI;IACHqB,KAAK,EAAE;MACLC,MAAM,EAAE,EAAE;MACVC,eAAe,EAAE,OAAO;MACxBC,cAAc,EAAE,QAAQ;MACxBC,iBAAiB,EAAE,CAAC;MACpBC,WAAW,EAAE,OAAO;MACpBC,WAAW,EAAE;IACf;EAAE,GAEF7B,KAAA,CAAAsB,aAAA,CAAClB,IAAI,QAAC,QAAM,CAAO,CACd,EACPJ,KAAA,CAAAsB,aAAA,CAACQ,SAAS;IACRP,KAAK,EAAE;MACLC,MAAM,EAAE,EAAE;MACVI,WAAW,EAAE,MAAM;MACnBG,WAAW,EAAE,CAAC;MACdC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE;IACX,CAAE;IACFC,WAAW,EAAC,yBAAyB;IACrCC,KAAK,EAAEnB,KAAM;IACboB,YAAY,EAAE,SAAAA,aAACC,IAAI;MAAA,OAAKpB,QAAQ,CAACoB,IAAI,CAAC;IAAA;EAAC,EACvC,EAEFrC,KAAA,CAAAsB,aAAA,CAACpB,IAAI;IAACqB,KAAK,EAAE;MAAEe,aAAa,EAAE,KAAK;MAAEZ,cAAc,EAAE;IAAe;EAAE,GACpE1B,KAAA,CAAAsB,aAAA,CAACjB,MAAM;IACLkC,KAAK,EAAC,OAAO;IACbC,OAAO,EAAE,SAAAA,QAAA;MAAA,OAAMnB,mBAAmB,CAAC,OAAO,CAAC;IAAA,CAAC;IAC5CoB,KAAK,EAAErB,gBAAgB,KAAK,OAAO,GAAG,MAAM,GAAG;EAAO,EACtD,EACFpB,KAAA,CAAAsB,aAAA,CAACjB,MAAM;IACLkC,KAAK,EAAC,sBAAsB;IAC5BC,OAAO,EAAE,SAAAA,QAAA;MAAA,OAAMnB,mBAAmB,CAAC,UAAU,CAAC;IAAA,CAAC;IAC/CoB,KAAK,EAAErB,gBAAgB,KAAK,UAAU,GAAG,MAAM,GAAG;EAAO,EACzD,EACFpB,KAAA,CAAAsB,aAAA,CAACjB,MAAM;IACLkC,KAAK,EAAC,iBAAiB;IACvBC,OAAO,EAAE,SAAAA,QAAA;MAAA,OAAMnB,mBAAmB,CAAC,gBAAgB,CAAC;IAAA,CAAC;IACrDoB,KAAK,EAAErB,gBAAgB,KAAK,gBAAgB,GAAG,MAAM,GAAG;EAAO,EAC/D,CACG,EACPpB,KAAA,CAAAsB,aAAA,CAACjB,MAAM;IAACmC,OAAO,EAAE7B,YAAa;IAAC4B,KAAK,EAAC,QAAQ;IAACE,KAAK,EAAC;EAAS,EAAG,CACrD,CACE;AAErB"},"metadata":{},"sourceType":"module","externalDependencies":[]}