{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScreenTemplate from \"../screenTemplate\";\nimport styles from \"./SearchStyle\";\nvar apiUrl = {\n  books: 'https://dummy-api.com/books',\n  articles: 'https://dummy-api.com/articles',\n  courseReserves: 'https://dummy-api.com/courseReserves'\n};\nvar handleSearch = function handleSearch() {\n  if (!(selectedCategory in apiUrl)) {\n    console.error('Invalid category selected');\n    return;\n  }\n  fetch(apiUrl[selectedCategory] + (\"?q=\" + query)).then(function (response) {\n    return response.json();\n  }).then(function (data) {\n    console.log(\"Search results for \" + selectedCategory + \":\", data);\n  }).catch(function (error) {\n    console.error(\"Error searching for \" + selectedCategory + \":\", error);\n  });\n};\nexport default function SearchScreen() {\n  var _useState = useState({}),\n    _useState2 = _slicedToArray(_useState, 2),\n    query = _useState2[0],\n    setQuery = _useState2[1];\n  var _useState3 = useState('books'),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedCategory = _useState4[0],\n    setSelectedCategory = _useState4[1];\n  return React.createElement(ScreenTemplate, null, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: {\n      height: 50,\n      width: '80%',\n      borderBottomWidth: 2,\n      borderColor: 'black',\n      borderStyle: 'dashed'\n    }\n  }, React.createElement(Text, null, \"Search\")), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    }\n  }, React.createElement(Button, {\n    title: \"Books\",\n    onPress: function onPress() {\n      return setSelectedCategory('books');\n    },\n    color: selectedCategory === 'books' ? 'blue' : 'gray'\n  }), React.createElement(Button, {\n    title: \"Articles + Databases\",\n    onPress: function onPress() {\n      return setSelectedCategory('articles');\n    },\n    color: selectedCategory === 'articles' ? 'blue' : 'gray'\n  }), React.createElement(Button, {\n    title: \"Course Reserves\",\n    onPress: function onPress() {\n      return setSelectedCategory('courseReserves');\n    },\n    color: selectedCategory === 'courseReserves' ? 'blue' : 'gray'\n  })), React.createElement(Button, {\n    onPress: handleSearch,\n    title: \"Search\",\n    color: \"#841584\"\n  })));\n}","map":{"version":3,"names":["React","useState","View","ScrollView","Text","Button","ScreenTemplate","styles","apiUrl","books","articles","courseReserves","handleSearch","selectedCategory","console","error","fetch","query","then","response","json","data","log","catch","SearchScreen","_useState","_useState2","_slicedToArray","setQuery","_useState3","_useState4","setSelectedCategory","createElement","style","container","height","width","borderBottomWidth","borderColor","borderStyle","flexDirection","justifyContent","title","onPress","color"],"sources":["/Users/apple/Desktop/Augmented Library 2/Screens/Search/SearchScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, ScrollView, Text, Button } from 'react-native';\nimport ScreenTemplate from '../screenTemplate';\nimport styles from './SearchStyle';\n//dummy APIs\nconst apiUrl = {\n  books: 'https://dummy-api.com/books',\n  articles: 'https://dummy-api.com/articles',\n  courseReserves: 'https://dummy-api.com/courseReserves',\n};\n\n//perform the search based on the selected category and the query here\nconst handleSearch = () => {\n  if (!(selectedCategory in apiUrl)) {\n    console.error('Invalid category selected');\n    return;\n  }\n\n  fetch(apiUrl[selectedCategory] + `?q=${query}`)\n    .then((response) => response.json())\n    .then((data) => {\n      console.log(`Search results for ${selectedCategory}:`, data); //?redirect to which page?\n    })\n    .catch((error) => {\n      console.error(`Error searching for ${selectedCategory}:`, error);\n    });\n};\n\nexport default function SearchScreen() {\n  const [query, setQuery] = useState({});\n  const [selectedCategory, setSelectedCategory] = useState('books'); // Default category is 'books'\n\n  return (\n    <ScreenTemplate>\n      <View style={styles.container}>\n        <View\n          style={{\n            height: 50,\n            width: '80%',\n            \n            borderBottomWidth: 2,\n            borderColor: 'black',\n            borderStyle: 'dashed',\n          }}\n        >\n          <Text>Search</Text>\n        </View>\n\n        {/* <TextInput\n          style={{\n            height: 40,\n            borderColor: 'gray',\n            borderWidth: 1,\n            margin: 10,\n            padding: 5,\n          }}\n          placeholder=\"Enter your search query\"\n          value={query}\n          onChangeText={(text) => setQuery(text)}\n        /> */}\n        <View style={{ flexDirection: 'row', justifyContent: 'space-around' }}>\n          <Button\n            title=\"Books\"\n            onPress={() => setSelectedCategory('books')}\n            color={selectedCategory === 'books' ? 'blue' : 'gray'}\n          />\n          <Button\n            title=\"Articles + Databases\"\n            onPress={() => setSelectedCategory('articles')}\n            color={selectedCategory === 'articles' ? 'blue' : 'gray'}\n          />\n          <Button\n            title=\"Course Reserves\"\n            onPress={() => setSelectedCategory('courseReserves')}\n            color={selectedCategory === 'courseReserves' ? 'blue' : 'gray'}\n          />\n        </View>\n        <Button onPress={handleSearch} title=\"Search\" color=\"#841584\" />\n      </View>\n    </ScreenTemplate>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}